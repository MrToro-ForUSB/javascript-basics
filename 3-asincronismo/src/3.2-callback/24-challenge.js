// ðŸ“² XMLHttpRequest es un objeto de JS que permite hacer peticiones hacia servicios en la nube(URLs o APIs).
const XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest; // instanciamos xmlhttprequest.
const API = "https://api.escuelajs.co/api/v1"; // API donde vamos a traer los datos.

function fetchData(urlApi, callback) {
	// funciÃ³n donde generamos la conexiÃ³n, recibe la url de la api y un callback.
	let xhttp = new XMLHttpRequest(); // generamos una nueva instancia mÃ¡s corta en xhttp.
	xhttp.open("GET", urlApi, true); // abrimos una conexiÃ³n con el mÃ©todo GET, urlApi y true para asincronismo.
	xhttp.onreadystatechange = function () {
		// cuando este cambio suceda, escuchamos el estado:
		if (xhttp.readyState === 4) {
			// comparamos el estado que sea igual a 4 (completado).
			if (xhttp.status === 200) {
				// comparamos el estatus sea igual a 200 (solicitud correcta).
				callback(null, JSON.parse(xhttp.responseText)); // retornamos callback null en error. Parse de datos.
			} else {
				// si lo anterior no ocurre:
				const error = new Error("Error" + urlApi); // generamos un nuevo error + urlApi.
				return callback(error, null); // retornamos callback con el error y null(para los datos).
			}
		}
	};
	xhttp.send(); // Enviamos el llamado o solitud.
}

// en el ejemplo se hacen varios llamados a modo de ejemplo:
fetchData(`${API}/products`, function (error1, data1) {
	// llamamos la funciÃ³n con argumentos de url y func anÃ³nima.
	if (error1) return console.error(error1); // si se genera error retornamos error, info en data 1.
	fetchData(`${API}/products/${data1[0].id}`, function (error2, data2) {
		// volvemos a llamar a la funciÃ³n.
		if (error2) return console.error(error2); // retornamos error2 (si se produce) e info guardada en data2.
		fetchData(
			`${API}/categories/${data2.category.id}`,
			function (error3, data3) {
				// 3er llamado a la func.
				if (error3) return console.error(error3); // retorn. error3 (si se produce). Info guardada en data3.
				console.log(data1[0]); // mostramos los datos de la primer llamada (estudiar la api).
				console.log(data2.title); // mostramos los datos de la 2da llamada.
				console.log(data3.name); // 3er llamada.
			}
		);
	});
});

// ðŸ“« MÃ©todos y propiedades:

// xmlhttp.open() â†’ Prepara la peticiÃ³n para ser enviada tomando tres parÃ¡metros: prÃ³tocolo, url, asÃ­ncrono (true).
// xmlhttp.readyState â†’ Retorna el estado de la peticiÃ³n.
// xmlhttp.onreadystatechange â†’ Un eventHandler que es llamado cuando la propiedad readyState cambia.
// xmlhttp.status â†’ Retorna el estado de la respuesta de la peticiÃ³n. (200,400,500)
// xmlhttp.send() â†’ EnvÃ­a la peticiÃ³n.

// ðŸ“ª Existen 5 estados en un llamado XMLHttpRequest:

// 0 â†’ Se ha inicializado.
// 1 â†’ Loading (cargando).
// 2 â†’ Se ha cargado.
// 3 â†’ Procesamiento si existe alguna descarga.
// 4 â†’ Completado.

// ðŸ“¬ CaracterÃ­sticas del protocolo http:

// Verbos: Los verbos indican acciones que estÃ¡n asociadas a peticiones y recursos, es decir, sirven para la manipulaciÃ³n de recursos cliente/servidor. Los Verbos http son:

// GET â†’ Solicita un recurso.
// HEAD â†’ Solicita un recurso pero sin retornar informaciÃ³n, la estructura de esta peticiÃ³n es igual que get tanto en su headers como estatus. Es Ãºtil cuando vamos a utilizar API, para comprobar si lo que vamos a enviar esta correcto y puede ser procesado.
// POST â†’ Sirve para la creaciÃ³n de recursos en el servidor.
// PUT â†’ Actualiza por completo un recurso, reemplaza todas las representaciones actuales del recurso de destino con la carga Ãºtil de la peticiÃ³n.
// PATCH â†’ Actualiza parcialmente un recurso.
// DELETE â†’ Elimina un recurso.

// ðŸ“­ Los cÃ³digos de estados del servidor:

// El cÃ³digo de estado (status codes) sirve para describir el estado de la peticiÃ³n hecha al servidor.

// 1xx â†’ Indican que la peticiÃ³n fue recibida por el servidor, pero estÃ¡ siendo procesada por el servidor.
// 2xx â†’ Indican que la peticiÃ³n fue recibida, aceptada y procesada correctamente.
// 3xx â†’ Indican que hay que tomar acciones adicionales para completar la solicitud.
// 4xx â†’ Indican errores del lado del cliente que hizo mal una solicitud.
// 5xx â†’ Indican errores del servidor. Suelen aparecer cuando existe un fallo en la ejecuciÃ³n en el servidor.

// ðŸ“§ Los cÃ³digos mÃ¡s comunes a la hora de interactuar con una API son:

// 200 â†’ OK â†’ Indica que todo estÃ¡ correcto.
// 201 â†’ Created â†’ Todo estÃ¡ correcto cuando se hizo una solicitud POST, el recurso se creÃ³ y se guardÃ³ correctamente.
// 204 â†’ No Content â†’ Indica que la solicitud se completÃ³ correctamente pero no devolviÃ³ informaciÃ³n. Este es comÃºn cuando se hacen peticiones con el verbo DELETE.
// 400 â†’ Bad Request â†’ Indica que algo estÃ¡ mal en la peticiÃ³n (no encontrÃ³ algo).
// 401 â†’ Unauthorized â†’ Significa que antes de hacer una solicitud al servidor nos debemos autenticar.
// 403 â†’ Forbidden â†’ Indica que no tenemos acceso a ese recurso aunque se estÃ© autenticado.
// 404 â†’ Not Found â†’ Indica que no existe el recurso que se estÃ¡ intentando acceder.
// 500 â†’ Internal Server Error â†’ Indica que algo fallÃ³, es un error que retorna el servidor cuando la solicitud no pudo ser procesada.
